// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tienda_Cece.Models;

#nullable disable

namespace Tienda_Cece.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250401041045_ini")]
    partial class ini
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tienda_Cece.Models.Carrito", b =>
                {
                    b.Property<int>("Id_Carrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Carrito"));

                    b.Property<string>("CarritoTemporalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoId_Producto")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_Carrito");

                    b.HasIndex("ProductoId_Producto");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Categoria", b =>
                {
                    b.Property<int>("Id_Categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Categoria"));

                    b.Property<string>("Descripcion_Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre_Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_Categoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Cliente", b =>
                {
                    b.Property<int>("id_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_cliente"));

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("numero_telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("primer_apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("segundo_apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_cliente");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Compra", b =>
                {
                    b.Property<int>("Id_Compra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Compra"));

                    b.Property<int>("Cant_Producto")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Proveedor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Producto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("link_Producto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Compra");

                    b.HasIndex("Id_Proveedor");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Comprobante", b =>
                {
                    b.Property<int>("Id_Comprobante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Comprobante"));

                    b.Property<int>("Cantidad_Producto")
                        .HasColumnType("int");

                    b.Property<int>("Id_Carrito")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.Property<double>("Precio_Unitario")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VentaId_venta")
                        .HasColumnType("int");

                    b.HasKey("Id_Comprobante");

                    b.HasIndex("Id_Carrito");

                    b.HasIndex("Id_Producto");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VentaId_venta");

                    b.ToTable("Comprobantes");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Empleado", b =>
                {
                    b.Property<int>("Id_Empleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Empleado"));

                    b.Property<int>("Id_Puesto")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numero_Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Primer_Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Segundo_Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_Empleado");

                    b.HasIndex("Id_Puesto");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Incapacidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Empleado")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Empleado");

                    b.ToTable("Incapacidad");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Item_Carrito", b =>
                {
                    b.Property<int>("Id_Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Item"));

                    b.Property<int>("Cant_Producto")
                        .HasColumnType("int");

                    b.Property<int>("Id_Carrito")
                        .HasColumnType("int");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.HasKey("Id_Item");

                    b.HasIndex("Id_Carrito");

                    b.HasIndex("Id_Producto");

                    b.ToTable("Items_Carrito");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Item_Favorito", b =>
                {
                    b.Property<int>("Id_Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Item"));

                    b.Property<int>("Id_Favorito")
                        .HasColumnType("int");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.HasKey("Id_Item");

                    b.HasIndex("Id_Favorito");

                    b.HasIndex("Id_Producto");

                    b.ToTable("Items_Favoritos");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Lista_Favorito", b =>
                {
                    b.Property<int>("Id_Favorito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Favorito"));

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_Favorito");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Lista_favoritos");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Pedido", b =>
                {
                    b.Property<int>("id_pedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_pedido"));

                    b.Property<int?>("CarritoId_Carrito")
                        .HasColumnType("int");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("id_pedido");

                    b.HasIndex("CarritoId_Carrito");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Producto", b =>
                {
                    b.Property<int>("Id_Producto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Producto"));

                    b.Property<int>("Cantidad_Stock")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion_Producto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnPromocion")
                        .HasColumnType("bit");

                    b.Property<bool>("EnTendencia")
                        .HasColumnType("bit");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("Id_Categoria")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Nombre_Producto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Precio_Unitario")
                        .HasColumnType("float");

                    b.HasKey("Id_Producto");

                    b.HasIndex("Id_Categoria");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Producto_Imagen", b =>
                {
                    b.Property<int>("Id_ProductoImg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_ProductoImg"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.Property<byte[]>("imagen")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id_ProductoImg");

                    b.HasIndex("Id_Producto");

                    b.ToTable("Producto_Imagenes");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Proveedor", b =>
                {
                    b.Property<int>("id_proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_proveedor"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductoId_Producto")
                        .HasColumnType("int");

                    b.Property<string>("nom_proveedor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("id_proveedor");

                    b.HasIndex("ProductoId_Producto");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Puesto_Trabajo", b =>
                {
                    b.Property<int>("id_puesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_puesto"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("descripcion_puesto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nombre_puesto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_puesto");

                    b.ToTable("Puestos_de_Trabajo");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Rebajo_Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpleadoId_Empleado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha_Final")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fecha_inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Empleado")
                        .HasColumnType("int");

                    b.Property<int?>("ProveedorId_Empleado")
                        .HasColumnType("int");

                    b.Property<string>("Tipo_salida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId_Empleado");

                    b.HasIndex("ProveedorId_Empleado");

                    b.ToTable("Rebajo_Empleados");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Resenia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("resenia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Reseñas");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Vacacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Empleado")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Empleado");

                    b.ToTable("Vacaciones");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Venta", b =>
                {
                    b.Property<int>("Id_venta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_venta"));

                    b.Property<int>("Cantidad_Producto")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio_Unitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id_venta");

                    b.HasIndex("Id_Producto");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("EstadoCuenta")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasDiscriminator().HasValue("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tienda_Cece.Models.Carrito", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId_Producto");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Cliente", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Compra", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("Id_Proveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Comprobante", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Carrito", "Carrito")
                        .WithMany()
                        .HasForeignKey("Id_Carrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.HasOne("Tienda_Cece.Models.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId_venta");

                    b.Navigation("Carrito");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Empleado", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Puesto_Trabajo", "Puesto")
                        .WithMany()
                        .HasForeignKey("Id_Puesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Incapacidad", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("Id_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Item_Carrito", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Carrito", "ID_Carrito")
                        .WithMany("Items")
                        .HasForeignKey("Id_Carrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tienda_Cece.Models.Producto", "ID_Producto")
                        .WithMany()
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ID_Carrito");

                    b.Navigation("ID_Producto");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Item_Favorito", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Lista_Favorito", "ListaFavorito")
                        .WithMany("ItemsFav")
                        .HasForeignKey("Id_Favorito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListaFavorito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Lista_Favorito", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Pedido", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Carrito", "Carrito")
                        .WithMany()
                        .HasForeignKey("CarritoId_Carrito");

                    b.Navigation("Carrito");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Producto", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("Id_Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Producto_Imagen", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany("Producto_Imagenes")
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Proveedor", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId_Producto");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Rebajo_Empleado", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId_Empleado");

                    b.HasOne("Tienda_Cece.Models.Empleado", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId_Empleado");

                    b.Navigation("Empleado");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Resenia", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Users", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Vacacion", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("Id_Empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Venta", b =>
                {
                    b.HasOne("Tienda_Cece.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tienda_Cece.Models.Users", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Carrito", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Lista_Favorito", b =>
                {
                    b.Navigation("ItemsFav");
                });

            modelBuilder.Entity("Tienda_Cece.Models.Producto", b =>
                {
                    b.Navigation("Producto_Imagenes");
                });
#pragma warning restore 612, 618
        }
    }
}
